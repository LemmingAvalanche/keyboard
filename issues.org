* Can't map a key to use five or more levels :issue_resolved:

When I make a map looking like this:

#+BEGIN_SRC generic
key <AB09> { [ period, colon, periodcentered, abovedot, a, b, c, d ] };
#+END_SRC

In other words, a key with eight levels, the key doesn't work properly any more.
I can still access the first and second levels, but not the third and fourth (or
the ones beyond that).

** DONE Fix this issue when I need more than four levels
CLOSED: [2016-10-15 lø. 19:07]
- CLOSING NOTE [2016-10-15 lø. 19:07] \\
  This issue was resolved in commit r#d721475e30e0 (“Add access to
  levels 5–8”, 2016-10-08).
I won't fix this right away, since I still have convenient access to four levels
right now, and I need to (1) make better mappings for levels 3 and 4, (2) make
some "compose" key sequences of my own, and (3) get used to using this new
setup. It only makes sense to worry about levels five to eight after I have done
all of that.

* Note that depressing all shift keys on the left side of the at the keyboard introduces jamming

When I try to press all shift levels on the left side of the keyboard, the third
key won't register. I think this is because of keyboard jamming, i.e., that
these keys use the same circuits (or something) which limits how many of them
can be depressed simultaneuosly.

This is not a problem for the shift keys on the right side of the keyboard; when
I depress "Return", "BKSL" and "Shift_R" at the same time, all keypresses are
registered[fn:xev_note].

Short of using another keyboard, I can't really solve this issue. But I thought
I should make a not of it in case I get confused about it in the future.

Note that this does not induce a big limitation. It only means that I can't
conveniently access the eight level. It seems like I can still access the sixth
and seventh level, or at least most of the keys; pressing "Caps_Lock" and "LSGT"
at the same time makes a few of the "shiftable" keys on the right side of the
keyboard jam, but most of the other keys on the right side work.

[fn:xev_note] Found out by running ~xev~.

* Find a way to compile and use configurations without having to be root

My current setup means that I need sudo privileges in order to use them; I copy
the configuration files to ~/usr/share/X11/xkb/symbols/~ directory. This means
that I can’t use these configurations on computers that aren’t my own. I should
find a way to compile and use these files as a regular user. For example, maybe
there is some dot file or configuration file related to X11 that could handle
this in a neat way?

** DONE Find a way to use these files without sudo privileges
   CLOSED: [2017-06-04 sø. 19:05]

   - CLOSING NOTE [2017-06-04 sø. 19:05] \\
     I seem to have found a way to compile and use keymap files without
     sudo privileges.

     This method seems to be restricted to use /one/ custom file, since
     the `include` statements etc. in that file seems to probably use
     the files in the “standard” directory — ~/usr/share/X11/xkb/~ in my
     case.  If that’s the case, then that drawback will be workable for
     me, since I just need to put all things that depend on each other
     in the same file.

     So the method is this:

     #+BEGIN_SRC shell
     setxkbmap <mapping> -print | xkbcomp -I<custom directory> - "$DISPLAY"
     #+END_SRC

     This prints the mapping and pipes it to a compiler, and then
     finally it is passed to the display ~DISPLAY~.

     Something strange is the way the argument to ~-I~ is right next to
     it, for example (with a concrete string):

     #+BEGIN_SRC
     -I"xkb-from-usr/"
     #+END_SRC

     This weirdness is on purpose since this:

     #+BEGIN_SRC
     -I "xkb-from-usr/"
     #+END_SRC

     Seems like it doesn’t work.
** Update [2017-05-11 to.]

It seems that this link contains some good pointers:

    https://askubuntu.com/questions/875163/is-it-possible-to-use-a-custom-keyboard-layout-without-sudo-access-if-so-how

Also this one:

    https://askubuntu.com/questions/876005/what-file-is-the-setxkbmap-option-rules-meant-to-take-and-how-can-i-add-keyboa/896297#896297

** Update [2017-06-04 sø.]

I downloaded [[https://github.com/aspiers/desktop-config][Adam Spier’s]] keyboard configuration.  He has some custom
keyboard mappings.  By figuring out how he uses ~setxkbmap~ to enable
his custom mappings, I could perhaps figure out how to do the same and
in turn be able to use my own mappings without sudo priviliges.

*** Context

I found the repository in this email:

https://groups.google.com/a/listserv.bat.ru/forum/#!topic/xkb/g0Mr_IJqMKQ

* DONE find a project name
  CLOSED: [2017-06-05 ma. 14:57]

  - CLOSING NOTE [2017-06-05 ma. 14:57] \\
    Project name: “Twin Dexter”.
I need a project name for these configurations.  I want to name the
keymapping file after the project.

* TODO make test script for the keymappings

Make a test script for the keymappings to run on every commit.  This to
make sure that silly mistakes like parsing errors or using wrong
includes sneak in.

I just found out that I used the wrong includes in my keymappings file.
I should take steps to avoid this in the future.

* TODO Make experimental keymapping using numeric row

I had the idea today that I could use my numeric row for some things.
Namely:

- Symmetric compose keys.
- Symmetric 1st and 2nd level shift keys.  Either normal, or the “press
  once and release and then press the key to be modified” (I don’t know
  the term for this right now).

I would map these keys to some keys used by the index, middle, and/or
ring fingers.

The initial idea was at first to get a more comfortable or ergonomic
compose keys by placing them on two of the numeric keys accessed by the
index fingers on either side (symmetric).  Then I would place those
now-missing numbers (perhaps 4 and 7) on one of the free keys on the
numeric row on the far left and far right.  They are free since now they
are not used as compose keys, and they are not used as symbol keys since
I access the symbol keys on the alphabetic row.

The more radical next step is to replace more of the numeric keys with
things like 1st and 2nd level shift — and perhaps even more stuff.  Then
I would not be able to use the numeric row for producing numbers.

** What about producing numbers?

The most “radical” version of this scheme is to put both compose and
shift keys on the numeric row.  But then I would need to find some other
place for producing numbers.  What i could do — and which is an idea that
I’ve had separately of this idea — is to make a “numpad” on the
alphabetic section.  this would be achieved by assigning some shift
level to these keys.  For example, maybe use the fifth level?

** Problems

What comes to my mind as the biggest drawback of this approach is that
it could become hard to use number keys together with control, alt, and
the super keys (Windows keys).  Xmonad uses ~S-<num>~ to change to
desktop ~<num>~.  On the other hand, I can’t immediately think of other
applications that uses the control, alt, or super keys together with
numbers and that I also use.

One way to mitigate this would be to have an alternative keyboard layout
to switch to when it becomes more convenient to use the numberic row.

* Keyboard scripts

** "AltGr" button produces newline when quickly pressed

This is due to the way I have mapped the "Return" key to "ISO_Level3_Shift", and
then this modifier back to produce the "Return" action/character when pressed.
Since "AltGr" is the original (only) character that was mapped to that
modifier, they now both emit the keycode 255 when pressed rapidly (255 is the
unused keycode that I mapped to the "Return" key).

This is not a practical issue right now, since I never press the "AltGr" key
rapidly by mistake. But it could become an issue when I am going to map "Caps
Lock" to act as another level 3 modifier when held down and pressed with other
keys.

** I should use ~setxkbmap~ instead of ~xmodmap~

I should use ~setxkbmap~ instead of ~xmodmap~ to map keys in the script, since
~xmodmap~ seems to be effectively deprecated in favour of ~setxkbmap~ in Ubuntu.
Also, apparently running a ~setxkbmap~ after having run an ~xmodmap~ command
might invalidate whatever changes the ~xmodmap~ invocation made.

** The order matters when combining level 2 and level 3 shifts :issue_resolved:

This only happens for the ~<BKSL>~ key.

If I press and hold the ~<BKSL>~ key, and then press and hold the ~<Shift_R>~
key (while still holding down ~<BKSL>~), then I enter level 4 (level 2 and level
3 shift pressed at the same time). But if I press and hold ~<Shift_R>~ /and
then/ press and hold ~<BKSL>~, then I am still at level 2. This is not the case
for the ~<Alt_R>~ (also known as "Alt Gr") key; I can press and release this key
and ~<Shift_R>~ in any order and they still work as expected, namely that the
fourth level is accessed whenever both are depressed at the same time.

At first I thought that this had something to do with the fact that ~<Alt_R>~
was the original (and only) "level 3 shift", and that I had used ~xmodmap~ to
make ~<BKSL>~ a "level 3 shift" key. But this is /not/ an issue when it comes to
~<Caps_Lock>~ and ~<Shift_L>~; they work just as well as ~<Alt_R>~ combined with
~<Shift_R>~.

*** Update 1

When pressing ~<BKSL>~ while running ~xev~, the "KeyPress event" registers the
keysym as "ISO_Level3_Shift", but the "KeyRelease event" registers the keysym as
"NoSymbol". This is /not/ the case for the "Caps_Lock" key; both the key press
and release events registers the keysym as "ISO_Level3_Shift".

This might be relevant to this issue.

*** Update 2

**** Not key ghosting

I did some testing in ~xev~. I suspected that it might have to do with key
ghosting, but that does not seem to be the case, since ~xev~ manages to register
both keys (~Shift_R~ and ~BKSL~) while one of them is first held down, no matter
what order they are depressed in[fn:higher_levels].

[fn:higher_levels] Moreover, it also manages to register the keypresses when
both of these keys and ~Return~ in addition are pressed down, and apparently in
whatever order. This is nice, since I feared that key ghosting would mean that I
could not hold down these keys together and have them all register. (These three
keys activate all the three shift levels, which means that I get access to the
eight level when I depress them simultaneusly.)

**** ~NoSymbol~ key when pressed after ~Shift_R~

When I depress and hold ~Shift_R~ and then depress ~BKSL~, the keysym for this
key is hex value 0x0, ~NoSymbol~.

I think this is due to xkb thinking that ~BKSL~ is supposed to a "shiftable
key" and not a modifier key. So when shift is held down and ~BKSL~ is pressed as
well, a lookup is made to see what symbol should be produced. And since ~BKSL~
has no /levels/ any more, it gets registers as being a "no symbol".

I think what I need to do is to register ~BKSL~ in the ~no_p1~ file so that it
won't get mistaken for a "shiftable" key (like the alphanumeric keys).

**** Also a problem for ~LSGT~

~LSGT~ also has this issue. Which is not surprising, since it too was
originally a "shiftable key".

*** Update 3: Issue resolved

I fixed the issue by editing the ~no_p1~ file (see the git repository for that
file). Basically I used the xkb construct ~modifier_map~ to declare ~BKSL~ and
~LSGT~ to be ~mod3~ and ~mod5~, respectively. I also had to map all levels of
these keys to their respective shift levels.

* Re-running script causes ~Return~ key to produce multiple newlines

When I re-run the script (perhaps because I ran some ~setxkbmap~ command and
that nullified the changes done by ~xmodmap~), the ~Return~ key starts producing
more than one newlines. It seems that the more times I run the script, the more
newlines it produces.

* Previous commit introduced errors :issue_resolved:

The previous commit introduced these issues:

- Caps lock no longer works as a modifier.
- Caps lock acts as caps lock again.

This is—in hindsight—quite understandable; I deleted the ~xmodmap~ invocation
that mapped "CAPS" to ~modifier_3~. Since that is gone, and my configuration
(the "no_p1" Xkb configuration file) doesn’t change the default behaviour of
"CAPS", then of course it goes back to working as caps lock.

** Update: issue resolved

I added the following line to my "no_p1" keyboard configuration:

#+BEGIN_SRC generic
include "level3(caps_switch)"
#+END_SRC

Which nicely does what I currently want; "CAPS" acts as a level 3 switch and
nothing else (i.e., not a dual purpose key).

* TODO option ~altwin(swap_alt_win)~ does not work for ~no-p2~

Using this line for ~no-p2~ does not work:

#+BEGIN_SRC
include "altwin(swap_alt_win)"
#+END_SRC

However, this works:

#+BEGIN_SRC
setxkbmap -option altwin:swap_alt_win "no(nodeadkeys)"
#+END_SRC

So there must be something wrong with my keymappings.  Probably with one
of the alt keys.
