Keyboard mappings for Linux using Xkb.

This repository contains keyboard layouts which are based on an ISO
(European) 105 key Qwerty layout, more specifically the Norwegian layout
(~no~).  The two main layout variations are “programming” (meant for
writing English and programming) and “Norwegian” (meant for writing
Norwegian, not great for programming).  The range of layouts vary from
small (but arguably very worthwhile) customizations to radical
customizations that makes the typing experience much better, in the
author’s experience.

These layouts are Qwerty in the sense that no letters are changed
around.  But the customizations are still quite drastic.  The goal of
these layouts is not to make a new arrangement of letters that is better
optimized for speed or ergonomics of writing prose (based on alternating
hands, letter frequencies, etc.), like layouts like Dvorak and Colemaks
tries to do.  Instead, the goal of these layouts could be contrasted by
describing them as customizing the /fringes/ of the layouts, such as the
~Caps Lock~ key and the numeric row.  For example, layout ~no-p1~ uses
the ~Caps Lock~ key and the ~BKSL~ key (left of the ~Return~ key on
European keyboards) to access “shift level 3”, which makes it easier to
access a lot of symbols compared to the regular Norwegian layout; on the
regular Norwegian layout one has to use the ~AltGr~ to access the third
level and type symbols like the braces (~{}~) and brackets (~[]~).
~no-p1~ also makes the [[https://en.wikipedia.org/wiki/Compose_key][Compose key]] available on both sides of the
keyboard, which makes it convenient to type combinations (compositions)
like ~+- ⇒ ±~, ~so ⇒ §~, ~!? ⇒ ‽~, ~<3 ⇒ ♥~ and many (many) more.

* Software needed

The Xkb utilities ~setxkbmap~ and ~xkbcomp~ are needed for
~scripts/keyboard-setup~.

If you have the Nix package manager as well as the Nix shell, you can
run ~nix-shell --pure~ while in this directory in order to set up a
shell from which you can run the ~scripts/keyboard-setup~.

* Usage

~scripts/keyboard-setup~ is a wrapper around ~setxkbmap~ that I use to
set up some of the layouts in ~xkb-tree/symbols/~.

Example usage:

#+BEGIN_SRC shell
scripts/keyboard-setup "twin-dexter(no-p5),twin-dexter(no-4)"
#+END_SRC

This sets up the keyboard to use the layouts ~twin-dexter(no-p5)~ and
~twin-dexter(no-4)~.  You can switch between layouts by pressing
~ScrollLock~.  If you have a scroll lock light indicator on your
keyboard, it will light on and off to indicate what layouts you are on.
You can also use the keys ~W~, ~E~, ~R~, ~T~ in combination with the
extend (~Ext~) modifier to change layouts.  So you can press ~Ext+<key>~
to:

- Go to the first layout (“home”): ~Ext+W~.
- Go to the next layout: ~Ext+E~.
- Go to the previous layout: ~Ext+R~.
- Go to the last layout (“end”): ~Ext+T~.

If you are only using two layouts it is probably easier to just use
“home” (~Ext+W~) and “end” (~Ext+T~), since then you won’t keep have to
keep which layout you are on in your head.

* Layouts

These are the layouts that are intended for use in
~xkb-tree/symbols/twin-dexter~ as of 2017-09-01:

- ~no~ — Basic Norwegian layout.  The primary difference from the
  regular Norwegian layout on Linux is that common symbols (mostly
  ASCII) are duplicated on the “alphabetic section” on the third level
  (the level accessed by the ~AltGr~ on most European keyboards).
- ~no-nodeadkeys~ — Like ~no~, but with dead keys disabled.  This makes
  typing things like “caret” (~^~) easier.
- ~no-p1~ — Like ~no-nodeadkeys~, but replaces the Norwegian characters
  ~Æ~, ~Ø~ and ~Å~ with characters that are useful for programming,
  namely ~)~, ~(~ and ~/~, respectively.  (This is the granddaddy of the
  other layouts—wanting to remap the Norwegian characters to symbols
  that are useful for programming was my initial motivation for
  learning about keyboard layouts under Linux (Xserver).)
- ~no-p2~ — Like ~no-p1~, but with a new level 2 shift key and more
  convenient ~Alt~ keys.
- ~no-p3~ — Like ~no-p2~, but with an “alphabetic numpad”.
- ~no-p4~ — Like ~no-p2~, but with a radically different “numeric row”.
- ~no-4~ — Norwegian version of ~no-p4~.
- ~eo-4~ — Esperanto version of ~no-p4~.  Esperanto layouts use the same
  strategy as the “programming” layouts with regards to the standard
  Norwegian layouts; replace the Norwegian keys with characters that are
  useful for Esperanto.
- ~no-p5~ — A minor variation of ~no-p4~.  Of no real general interest.

* Tools

The following are useful tools for working with Xkb.

- ~xkbcomp~: “compile a XKB keyboard description to a keymap suitable
  for loadkeys”.  Use this when the mapping won’t compile and you want
  better error messages.  Remember to use a relative path to the file if
  you want to try to compile a mapping in the current directory.
- ~setxkbmap~: “set the keyboard using the X Keyboard Extension”.
- ~man xkeyboard-config~: “XKB data description files”.  Really useful to
  find ready-made options like “swap Ctrl and Caps Lock”.
- ~xkbprint~: “print an XKB keyboard description”.  Print a PostScript
  file of a keyboard mapping.  The easiest way to use seems to be to
  print the current keyboard by using [[https://askubuntu.com/a/381393/136104][an “X display specification”:]]
  ~xkbprint :0 output.ps~.  You should be able to open the PostScript
  file in a PDF viewer.
- ~xkbset~: utility to set user preferences like “stickykeys” (“latch”
  in Xkb terminology), mousekeys, and so on.  This might be a useful
  complement to ~setxkbmap~ since it seems that setting latch options is
  pretty limited with ~setxkbmap~, at least according to ~man
  xkeyboard-config~.  ([[https://superuser.com/a/414535][Source]])
- ~xkbwatch~: reports the changes to the Xkb states.  This might be
  useful if you want some visual indication of things like the lock- or
  lach-state of the various shifts, for example.
- ~gkbd-keyboard-display~: display a keyboard layout from the command
  line.  Much more convenient than using ~xkbprint~ if you simply want
  to quickly find out what some standard layout looks like.  Example
  usage: display the ~us~ layout with ~gkbd-keyboard-display -l us~.
  ([[https://askubuntu.com/a/459997/136104][Source]].)
  Note: you might want to run ~setxkbmap -option "" <layout>~
  before running this command in order to reset any options.  I’ve run
  into some confusing behavior in which the mappings from the keyboard
  that I was currently using seemed to bleed into the visual
  description, although it had nothing to do with that layout.  More
  concretely, I ran ~gkbd-keyboard-display -l 'us(intl)'~ which showed
  some mappings that are not supposed to be on that layout.

* Files

- Keyboard mappings for the system is located in ~/usr/share/X11/xkb/symbols~.
- Compose mappings for X: ~/usr/share/X11/locale/en_US.UTF-8/Compose~.
- Keysymbol definitions are in: ~/usr/include/X11/keysymdef.h~.  There
  you can find what keys and symbols (characters) are named, for example
  ~XK_Home~ (home key) and ~XK_ampersand~ (~&~).

** Finding files on NixOS

The above listed files are not stored in the usual places on NixOS.  You
can use a utility like Find to search for them in the ~/nix/store/~
directory tree:

#+BEGIN_SRC shell
cd /nix/store
find -name 'keysymdef.h'
#+END_SRC

This should give you several results.

* License

The MIT license; see ~LICENSE.md~.
