* The source repository of XKB configurations

Apparently this is where you can find the releases of the “source” of
the XKB configuration that comes installed on Linux etc.:

https://www.freedesktop.org/wiki/Software/XKeyboardConfig/

I downloaded the repository and indeed it looks similar my XKB
configuration located at ~/usr/share/X11/xkb/~.  The directory structure
looks the same, and I opened the Norwegian (~no~) keyboard mapping file
and it looked similar to the one I have on my system.

* Example of custom configurations

Adam Spiers has a repository which among other things contains custom
keymappings, keycodes, and geometry:

https://github.com/aspiers/desktop-config/tree/master/.xkb

His keymappings (the ~symbols~ directory) might be useful to look at in
order to figure out how to structure things.

* Interesting document about Xkb

[[https://github.com/Delapouite/xkb-walkthrough][This repository]] has some nice information about Xkb.  This part in
particular struck me, since I didn’t know you could use ~|~ [fn:converted-formatting]:

#+BEGIN_QUOTE
In some case ~include~ statements can turn into behemoths, like :

#+BEGIN_SRC
include "file1(map3)+file7+file2(map1)|file1(map2)"
#+END_SRC

Two separators are involved :

- ~+~ will override an existing definition
- ~|~ will augment an existing definition
#+END_QUOTE

[fn:converted-formatting]: I’ve converted to Org formatting.

The part about the meaning of ~VoidSymbol~ was also useful, since I
should probably use that in a few places instead of ~NoSymbol~.

* Apropos question about changing groups

[[https://stackoverflow.com/questions/39315057/xkb-three-key-shortcut-to-acyclic-switch-keyboart-layout-like-in-windows][This SO question]] is related to something that I want to do.  I want to
have four keys to switch between the (up to) four groups.  Currently I
use “first”, “last”, “next”, and “previous” group keys (although in
practice only “first” and “last”).  Instead I want to replace “next” and
“previous” with “second” and “third”, so that I have three keys to lock
the group.  In that question he defines two such keys.  If it is correct
I should be able to use the same thing.

** DONE try to define “second” and “third” group like in that question
   CLOSED: [2017-11-12 Sun 22:04]
   - CLOSING NOTE [2017-11-12 Sun 22:04] \\
     This has been implemented; see r#ae441a12c7ff (“Merge branch
     ‘group-locks’ into next”, 2017-11-12).  I can choose (lock) all four
     groups directly.

     I ended up doing it in a different way than in the StackOverflow
     question.  I tried to define keys like `ISO_Second_Group` in the
     `compat` section, but that didn’t work.  For more information on that,
     see r#ca33ce4ac83b (“Revert “Change “previous”, “next”, etc. to the new
     keys””, 2017-11-12).

* Multiple actions

I found this in one of the compat files in the xkb files:

#+BEGIN_SRC
interpret Mode_switch {
    useModMapMods= level1;
    virtualModifier= AltGr;
    action= SetGroup(group=2,clearLocks);
};
#+END_SRC

I did not know that you could ~clearLocks~ in a ~SetGroup~.

* ~+Exactly(_)~?

I found this thing in the [[https://pastebin.com/QhBbWAXi][wild]]:

#+BEGIN_SRC
interpret ISO_Level2_Latch+Exactly(Shift) {
    useModMapMods=level1;
    action= LatchMods(modifiers=Shift,clearLocks,latchToLock);
};
#+END_SRC

I didn’t know that ~Exactly(_)~ existed.

* Key chording on Linux: it’s not looking good :chording:

Apparently it is hard to implement key chording on Linux:

#+BEGIN_QUOTE
Part of the problem is that there is no such thing to an X server or
client as "simultaneous key presses," except for modifier keys such as
Ctrl and Alt. Whatever code would be involved would have to look for
XKeyPress events for W, E, and F in any order sequentially.
#+END_QUOTE

https://unix.stackexchange.com/questions/176927/method-to-convert-simultaneous-key-chord-letter-key-combo-into-another-key#comment295974_176927

However, there might still be some hope:

#+BEGIN_QUOTE
So after four years, I finally have a rough draft of an answer to this
question. The answer is to use Interception Tools which uses libevdev to
grab keyboard input and do processing on it before re-emitting
it. Regarding simultaneous key mapping, I have made a rough plugin for
Interception Tools called Chorded Keymap that lets h, j, k, l act like
the arrow keys when s and d are pressed simultaneously.
#+END_QUOTE

https://unix.stackexchange.com/a/403671/185805

* Empty type causes segmentation fault

It seems that assigning an “empty type” (~type[Group1] = [
]~) to a key causes a segmentation fault.  Something like this:

#+BEGIN_SRC
xkb_symbols "lock-unlocker" {
    // Print key
    replace key <PRSC> {
    type[Group1] = [

    ],
    symbols[Group1] = [
    …
#+END_SRC

Leads to this:

#+BEGIN_SRC
Warning:          Multiple definitions of the FOUR_LEVEL_KEYPAD key type
                  Earlier definition ignored
Warning:          Multiple default components in twin-dexter
                  Using latin, ignoring default
/home/kristoffer/xkb/scripts/keyboard-setup: line 18:  9854 Done                    setxkbmap -option "" -layout "$1" -compat my-complete -option nbsp:none -option numpad:mac -print
      9855 Segmentation fault      | xkbcomp -I"/home/kristoffer/xkb/xkb-tree" - "$DISPLAY"
#+END_SRC
