* [2017-07-27 Thu]

** Recent experiences with ~no-p4~ and ~no-4~ :experience-report:

I have had a nice time using the two layouts ~twin-dexter(no-p4)~ and
~twin-dexter(no-4)~ lately.  I also have had the less radical
~twin-dexter(no-p3)~ at the ready, but I haven’t ended up needing that
lately.

This is the script that I manually run after starting up my laptop
(NixOS):

#+BEGIN_SRC shell
~/xkb/scripts/keyboard-setup "twin-dexter(no-p3)" "twin-dexter(no-p4)" "twin-dexter(no-4)"
#+END_SRC

The reason that ~twin-dexter(no-p3)~ is included is as a fallback for
when using the “4” layouts becomes too constraining or limiting.  This
was very much necessary before when I couldn’t shift windows in Xmonad
while using a “4” layout, but I am able to do that now that I have
customised Xmonad to use the numpad for shifting
windows [fn:xmonad-numpad-added].

[fn:xmonad-numpad-added]: This was added in commit r#f62477962622 (“Add
numpad keys to change betwee workspaces”, 2017-07-08).

I made ~twin-dexter(no-4)~ in order to more conveniently write in
Norwegian, because I found using compose key combinations to be
awkward.  Shifting between the two is easy since I use ~Shift2-Delete~
(~Caps Lock-Delete~), since ~Delete~ is bound to ~ISO_Next_Group~ on
that level (third level).  The only time that I find it inconvenient to
use ~twin-dexter(no-4)~ is when I have to use symbols like forward slash
and other programming-related symbols a fair bit, since these symbolses
are moved around compared to ~twin-dexter(no-p4)~.  But when I am only
writing Norwegian prose with the former layout and programming and
English with the latter, this setup feels very convenient.

The “big idea” behind the “4” layouts is to replace the numeric row with
modifiers, compose keys, and the menu key, and to move the numbers to
the “alphabetic numpad” on the left hand.  This makes all three
shift-levels very easy to access from the home row.  This is what I
thought beforehand, and it has turned out to be true when trying it out
for a good while, now.  Another change is that these are “latches”, or
“sticky keys”, which means that they are not typically held down and
pressed with another key but are instead tapped and then released before
hitting the next key.  So far, this seems to be a superior alternative
to the standard “hold then press second then release” shift behavior.

I had a lot of trouble, and still continue to have trouble with,
adjusting to use the “alphabetic numpad”.  It was really painful in the
beginning, but I feel that I persevered to a point where I am making
progress.  Things also got a lot easier lately when I learned that
“latched shift keys” can /also/ be held down in order to more easily
press multiple same-shifted symbols.  So I can hold down the relevant
shift key and write strings like ~2017~, instead of having to alternate
between tapping the relevant shift key and the key.  For some reason I
didn’t stumble upon this fact by myself by simply trying to hold down a
shift key and pressing a non-modifier key.

* [2017-08-31 Thu]

** Using dead key mappings as a poor man’s extra level

I have implemented a first version of what I have referred to as an
Extend layer variation using dead key mappings.  The support for this on
the keymapping side was implemented in r#41cf161098c3 (“Turn two keys
into a dead key”, 2017-08-30), while the bulk of the implementation (the
mappings) were implemented in r#6e9fdf9eff69 (“Make an “Extend layer” by
way of a dead key”, 2017-08-30) in the dotfiles repository.

The purpose of this was to be able to get a new effective layer which
could be accessed with a single prefix key, just like the first, second
and third shift levels for layouts like ~twin-dexter(no-p4)~ and
~twin-dexter(no-4)~.  In this way, I have a new layer which can be
accessed in the same way as the first three shift layers, namely by
pressing and releasing a key (the dead key) and then pressing any of the
regular (non-modifier, non-compose, etc.) keys.

I have also wanted to implement the Extend layer as one of the shift
layers.  I might still do that, and then these two ways to access the
layers can complement each other.

*** Problems

There are two problems so far.

1. Mouse buttons and movement does not seem to work.
2. Group switching keys does not work.

As for the first, I suspect that the compose mappings that I am using is
not powerful enough to implement things like moving the cursor by offset
coordinates.  As for the second, I have tried to find out why it doesn’t
work but with no luck.  My motivation for these mappings is that I would
be able to switch layouts without moving my hands as much as under my
present setup.  Another motivation is that all the “space” for buttons
left open enough room for four of the group switching buttons/symbols (I
only use one of them in the old and current setup).

** Yet another dead key?

I might want to use another key for a dead key.  (Geez, will I even be
able to find enough symbols to use in all these mappings?)

The key I have in mind is ~<AD12>~, which currently has this mapping in
~twin-dexter(no-p1)~ and layouts that inherit from that one:

#+BEGIN_EXAMPLE
key <AD12> { [ asciicircum, asciitilde, U0302, NoSymbol, U0303 ] };
#+END_EXAMPLE

I don’t think I need this key that much in this capacity, namely as a
normal key.  The reason for that is that I can move ~asciicircum~ and
~asciitilde~ to the second and third level of the `<AD12>` key,
respectively.  I think this would make typing the ~asciicircum~ symbol
only marginally less convenient, and it would free up room for a /lot/
of new mappings.

** Dead key layer not working

The “Extend layer” does not work in most of the applications that I am
using.  It works in Spacemacs and Xterm, but not in Firefox,
Gnome-terminal, among others.  This means that the utility is severly
diminished, since it would be of most in applications like Firefox—I
already use Evil in Spacemacs so I don’t need things like convenient
access to arrow keys in that application.

Maybe this was a failed experiment?  Maybe I should just make an Extend
layer as one of the shift levels and drop the dead key variant?

* [2017-09-10 Sun]

** Using dead keys to insert strings like phrases or standard data

A few days ago I had the idea to use dead key mappings to expand
abbreviations to full strings.  I have made two commits containing a few
such things in my dotfiles repository[fn:update-about-insert-strings]:

- r#a693606da1db (“Try to make abbreviation expanders”, 2017-09-07)
- r#fd2c279d1c68 (“Add some “standard data””, 2017-09-08)

[fn:update-about-insert-strings] Update 2017-10-18: The second commit
    does not exist anymore since I have removed it in a rebase.

As an example, I can type ~<dead_greek> <b> <t> <w>~ and get the
resulting string ~by the way~:

#+BEGIN_EXAMPLE
<dead_greek> <b> <t> <w> : "by the way"
#+END_EXAMPLE

Another example is not a phrase but some “data”, namely my name[fn:update-auto-expand-name]:

#+BEGIN_EXAMPLE
<dead_greek> <k> : "Kristoffer Haugsbakk"
#+END_EXAMPLE

This is useful when I have to type in my name in some form online and
Firefox does not know that it should fill it in automatically.

[fn:update-auto-expand-name]: Update 2017-10-18: This does not exist
    anymore, either (see previous footnote about the removed commit).

*** Novelty

At least to me this is a novel idea.  I have seen this implemented
elsewhere, but they have used ~<Multi_key>~ (the compose key).  I prefer
to use the compose key for three-combo
mappings [fn:for_example_compose], so I have been hesitant to make
compose key mappings for things like phrases.  But it hit me that,
although I might not want to occupy compose mappings for this purpose,
there are a lot of dead keys that I can use that I don’t have a need
for.  By using dead keys for this purpose, I can have my cake and eat it
too—I can use three-combo compose mappings while still being able to
have mappings for phrases and data (such my name and email addresses).

[fn:for_example_compose]: For example this currency mapping:

#+BEGIN_EXAMPLE
<Multi_key> <y> <dollar> : "¥" # YEN SIGN
#+END_EXAMPLE

*** Using tab

Based on an experiment I just did I can use special characters like tab
(~\t~) in strings.  This should mean that I can embed tabs to tab to the
next field, like when filling in forms online.

For exaomple, this mapping:

#+BEGIN_EXAMPLE
# Address
<dead_greek> <a> : "Karibakken 88\t1234\tFugletveit"
#+END_EXAMPLE

Should produce these strings, delimited with a tab:

- ~Karibakken~
- ~1234~
- ~Fugletveit~

Where each bullet corresponds to a field.

* [2017-09-11 Mon]

** Rolling key combinations with compose key

I just found out that it works quite well to “roll” my fingers from the
compose key (`Multi_key`) to another shift key, in the case that the
first symbol following the compose key is on some shift level.  For
example, if I want to type capital lambda (`Λ`), I need to type this
sequence:

#+BEGIN_EXAMPLE
Multi_key shift l f
#+END_EXAMPLE

One way to achieve this is to type the compose key on the right side,
then the shift key on the left side, then the ~l~ key, then the ~f~ key:

#+BEGIN_EXAMPLE
7, 4, l, f
#+END_EXAMPLE

This way I alternate between the right and left hand two times.

It turns out that it is more comfortable to do it in this way:

#+BEGIN_EXAMPLE
5, 4, l, f
#+END_EXAMPLE

In other words, use both the compose and shift key on the left side.
More concretely, depress the ~5~ key with the index finger and then the
~4~ key with the middle finger—this can be done in a rolling motion.

I think I haven’t tried to do this that much since rolling my fingers
quickly does not work for multiple latch keys; if I roll my keys in
quick succession, both latches don’t register properly.  But rolling my
fingers works much better when I first hit the compose key and then a
latch shift key.

I think I should keep in mind to do this for all capital greek letters,
and also for all compose key mappings that start with a shifted key.

*** Implications for compose mappings

I think I should rethink some mappings with this “rolling technique” in
mind.  In particular, some of the mappings should use a shifted key for
the first argument instead of the second argument.  For example, this
currency mapping:

#+BEGIN_EXAMPLE
<Multi_key> <y> <dollar> : "¥" # YEN SIGN
#+END_EXAMPLE

Should probably be changed to this:

#+BEGIN_EXAMPLE
<Multi_key> <dollar> <y> : "¥" # YEN SIGN
#+END_EXAMPLE

* [2017-11-11 Sat]

** Group latch works with the compose key

It turns out that I can latch the next group (choose the next group or
layout for the next non-modifier keypress) while in the middle of a
compose sequence.  That means that I can press the compose key, choose
the next layout with the group latch key (since perhaps the key is only
on the group or layout), press the relevant key, and continue with the
compose mapping in the same layout.

The test that I used was to try to produce ~≠~ (not equals) with the
compose mapping ~/ =~.  I started on a Norwegian layout, which has the
~/~ key that the programming layouts use mapped to ~å~.  This was the
sequence I used:

- Press compose.
- Press latch group.
- Press the ~/~ key (~å~ in the current layout)
- Press the ~=~ key.

And it produced ~≠~, as hoped for.

** Testing out adding another group to ~no-p6~

Now that I have to latch group keys I wanted to experiment with adding a
new group to ~no-p6~.  I have started by adding a new group that maps
the topmost alphabetic row to the twelve first function keys.

First of all I had to remove the options that had to do with group
toggling (changing layouts, in the case that I’ve been using it).  I
have not been able to get this to work when both layouts are selected.
I figured that the second layout (~no-4~) would now become group 3.  It
seems that that is not the case.  I am able to use the second group via
the group latch key if I only select one layout (only ~no-p6~, not
~no-4~).

** Some nice documentation on making new layouts

I’ve just looked through a lot of [[https://www.x.org/releases/X11R7.7/doc/xorg-docs/input/XKB-Enhancing.html][this document]] and it looks very
promising as a guide on how to define new layouts.  And it looks like it
comes from some authorative source (www.x.org).  Where have this gem
been all this time‽
