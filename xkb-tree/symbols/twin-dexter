// This file offers two layouts: `pr` (for programming) and `no`
// (Norwegian).  Use `scripts/keyboard-setup` (run from the base of the
// project):
//
//     scripts/keyboard-setup "twin-dexter(pr)"
//
// Note that you should only pass in _one_ layout; you should not pass
// in both like this:
//
//     scripts/keyboard-setup "twin-dexter(pr),twin-dexter(no)"
//
// Instead, if you need to switch between the two, you should make
// keybindings with a program like e.g. Xchainkeys:
//
//     # From a `xchainkeys.conf` file.
//     mod2-w :exec <path to project>/scripts/keyboard-setup "twin-dexter(pr)"
//     mod2-e :exec <path to project>/scripts/keyboard-setup "twin-dexter(no)"

// Main layout.
default partial alphanumeric_keys
xkb_symbols "base" {
    include "no"

    // Make levels 5‚Äì8 possible.
    include "level3(modifier_mapping)"
    include "level5(modifier_mapping)"

    include "twin-dexter(lsgt-as-shift)"
    include "twin-dexter(set-up-alts-and-windows)"

    // symbols
    include "twin-dexter(base-punctuation)"
    include "twin-dexter(rightsinglequotemark)"
    include "twin-dexter(level-three-symbols)"
    include "twin-dexter(level-four-symbols)"

    // level 5
    include "twin-dexter(alphabet-section-numpad)"
    include "twin-dexter(right-side-nav-and-misc)"

    include "twin-dexter(hyper)"
    include "twin-dexter(latches-menu-and-compose)"

    include "twin-dexter(return-lock-shift-levels)"

    include "twin-dexter(lvl-5-media-keys)"

    // Experimental
    include "twin-dexter(group-3-test-symbols)"
    include "twin-dexter(group-4-test-symbols)"

    // Groups
    include "twin-dexter(group-locks)"

    // In development
    include "twin-dexter(fake-latch-escape-level-four)"
    include "twin-dexter(fake-g1l1-on-g4l4)"

    include "twin-dexter(lock-unlocker)"

    // TODO: Make some use of these dead keys by making mappings in the
    // `~/.XCompose` file (see the dotfiles repository).
    replace key <TLDE> {
        [ kana_a ]
    };

    key <AD12> {
        [ kana_u ]
    };
    // `kana_e`: box-drawing mappings.
    key <AD11> { [
        kana_e, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
};

// Programming layout.
xkb_symbols "pr" {
    include "twin-dexter(base)"
    include "twin-dexter(all-f-keys-group-2)"
};

// Like the ‚Äúmain‚Äù layout but with Norwegian letters and Norwegian double
// quotes.
xkb_symbols "no" {
    include "twin-dexter(base)"
    include "twin-dexter(no-common)"
    include "twin-dexter(all-f-keys-group-2)"
};

// Mappings for Norwegian layouts.
//
// Include this layout on top of other modifications if you want a
// layout for writing Norwegian.
partial alphanumeric_keys
xkb_symbols "no-common" {
    // Norwegian characters
    key.type[Group1] = "EIGHT_LEVEL";
    key <AD11>	{ [
        aring, Aring, NoSymbol, NoSymbol
    ] };
    key <AC10>	{ [
        oslash, Ooblique, NoSymbol, NoSymbol
    ] };
    key <AC11>	{ [
        ae, AE, NoSymbol, NoSymbol
    ] };

    // Use Norwegian quotemarks instead of the English ones which are
    // defined in `base`.
    //
    // NOTE For some reason I have to set level 5 here again, even
    //   though the `alphabet-section-numpad` section should have taken
    //   care of it; if I simply set level 5 to `NoSymbol`, then these two
    //   keys will output no symbols on level 5.  I have no idea why.  So
    //   this is a hack, although it‚Äôs not much of a bother.
    key <AC02> { [
        NoSymbol, NoSymbol, guillemotleft, NoSymbol,
        4, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AC03> { [
        NoSymbol, NoSymbol, guillemotright, NoSymbol,
        5, NoSymbol, NoSymbol, NoSymbol
    ] };
};

// Punctuation on the first and second levels of the keys next to the
// `M` key:
//
// ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
// ‚îÇ M   ‚îÇ;    ‚îÇ:    ‚îÇ_    ‚îÇShift        ‚îÇ
// ‚îÇ m   ‚îÇ,    ‚îÇ.    ‚îÇ-    ‚îÇ             ‚îÇ
// ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
//
xkb_symbols "base-punctuation" {
    key <AB08> { [
        comma, semicolon, NoSymbol, NoSymbol
    ] };
    key <AB09> { [
        period, colon, NoSymbol, NoSymbol
    ] };
    key <AB10> { [
        minus, underscore, NoSymbol, NoSymbol
    ] };
};

// Right single quote mark (apostrophe) on the `√ò` key.
xkb_symbols "rightsinglequotemark" {
    key <AC10> { [
        rightsinglequotemark, NoSymbol, NoSymbol, NoSymbol
    ] };
};

// ¬ß Level Three Symbols
//
// All non-alphabetic ASCII characters that are not available on the
// first or second level of these or other keys on the ‚Äúalphabetic
// section‚Äù of the keyboard.
//
// Also includes some ‚Äútypographic‚Äù characters:
//
// ‚Ä¢ En-dash and em-dash.
// ‚Ä¢ Curly quotes (`‚Äú‚Äù`) (English-style; overriden with Norwegian-style
//   quotes (`¬´¬ª`) in `no-common`).
// ‚Ä¢ ‚ÄúProper‚Äù (typographic) apostrophe (`‚Äô`).
// ‚Ä¢ Midpoint (`¬∑`) which is currently not in use.
xkb_symbols "level-three-symbols" {
    key.type[Group1] = "EIGHT_LEVEL";
    // 2nd keyboard row
    key <AD01> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, at, NoSymbol
    ] };
    key <AD02> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, exclam, NoSymbol
    ] };
    key <AD03> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, rightsinglequotemark, NoSymbol
    ] };
    key <AD04> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, quotedbl, NoSymbol
    ] };
    key <AD05> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, asciicircum, NoSymbol
    ] };
    key <AD06> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, bar, NoSymbol
    ] };
    key <AD07> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, grave, NoSymbol
    ] };
    key <AD08> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, equal, NoSymbol
    ] };
    key <AD09> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, question, NoSymbol
    ] };
    key <AD10> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, plus, NoSymbol
    ] };
    key <AD11> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, asciitilde, NoSymbol
    ] };
    // 3rd keyboard row
    key <AC01> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, percent, NoSymbol
    ] };
    key <AC02> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, leftdoublequotemark, NoSymbol
    ] };
    key <AC03> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, rightdoublequotemark, NoSymbol
    ] };
    key <AC04> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, apostrophe, NoSymbol
    ] };
    key <AC05> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, asterisk, NoSymbol
    ] };
    key <AC06> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, numbersign, NoSymbol
    ] };
    key <AC07> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, slash, NoSymbol
    ] };
    key <AC08> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, parenleft, NoSymbol
    ] };
    key <AC09> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, parenright, NoSymbol
    ] };
    key <AC10> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, bracketleft, NoSymbol
    ] };
    key <AC11> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, bracketright, NoSymbol
    ] };
    // 4th keyboard row
    key <AB01> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, less, NoSymbol
    ] };
    key <AB02> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, greater, NoSymbol
    ] };
    key <AB03> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, braceleft, NoSymbol
    ] };
    key <AB04> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, braceright, NoSymbol
    ] };
    key <AB05> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, dollar, NoSymbol
    ] };
    key <AB06> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, ampersand, NoSymbol
    ] };
    key <AB07> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, backslash, NoSymbol
    ] };
    key <AB08> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, periodcentered, NoSymbol
    ] };
    key <AB09> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, emdash, NoSymbol
    ] };
    key <AB10> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, endash, NoSymbol
    ] };
};

// ¬ß Level Four Symbols
//
// For symbols that are nice to have at hand but that are needed less
// frequently than the level three symbols (see `level-three-symbols`).
//
// Most of these keys are yet to be mapped to.
xkb_symbols "level-four-symbols" {
    // 2nd keyboard row
    key <AD01> {
    symbols[Group1] = [
        # Link üîó
        NoSymbol, NoSymbol, NoSymbol, U1F517
    ] };
    key <AD02> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, leftsinglequotemark
    ] };
    // NOTE Intentionally duplicated; also occurs on level three of this
    // key.
    key <AD03> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, rightsinglequotemark
    ] };
    key <AD04> {
    symbols[Group1] = [
        // ‚ú≥ Eight-Spoked Asterisk
        NoSymbol, NoSymbol, NoSymbol, U2733
    ] };
    key <AD05> {
    symbols[Group1] = [
        // üîñ Bookmark
        // Mnemonic: ‚Äút‚Äù for ‚Äútag‚Äù.
        NoSymbol, NoSymbol, NoSymbol, U1F516
    ] };
    // NOTE key jams when using the left hand to access this level on my
    //     Windows [keyboard].
    //
    //     Need to lock level four in order to (ergonomically) access
    //     level four of this key.
    //
    //     üîó keyboard: https://www.amazon.com/Microsoft-Ergonomic-Wireless-Desktop-Keyboard/dp/B00CYX54C0/
    key <AD06> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    // NOTE key jams when using the left hand to access this level on my
    //     Windows [keyboard].
    //
    //     Need to lock level four in order to (ergonomically) access
    //     level four of this key.
    //
    //     üîó keyboard: https://www.amazon.com/Microsoft-Ergonomic-Wireless-Desktop-Keyboard/dp/B00CYX54C0/
    key <AD07> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    // NOTE key jams when using the left hand to access this level on my
    //     Windows [keyboard].
    //
    //     Need to lock level four in order to (ergonomically) access
    //     level four of this key.
    //
    //     üîó keyboard: https://www.amazon.com/Microsoft-Ergonomic-Wireless-Desktop-Keyboard/dp/B00CYX54C0/
    key <AD08> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    // NOTE key jams when using the left hand to access this level on my
    //     Windows [keyboard].
    //
    //     Need to lock level four in order to (ergonomically) access
    //     level four of this key.
    //
    //     üîó keyboard: https://www.amazon.com/Microsoft-Ergonomic-Wireless-Desktop-Keyboard/dp/B00CYX54C0/
    key <AD09> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    // NOTE key jams when using the left hand to access this level on my
    //     Windows [keyboard].
    //
    //     Need to lock level four in order to (ergonomically) access
    //     level four of this key.
    //
    //     üîó keyboard: https://www.amazon.com/Microsoft-Ergonomic-Wireless-Desktop-Keyboard/dp/B00CYX54C0/
    key <AD10> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    // NOTE key jams when using the left hand to access this level on my
    //     Windows [keyboard].
    //
    //     Need to lock level four in order to (ergonomically) access
    //     level four of this key.
    //
    //     üîó keyboard: https://www.amazon.com/Microsoft-Ergonomic-Wireless-Desktop-Keyboard/dp/B00CYX54C0/
    key <AD11> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    // NOTE key jams when using the left hand to access this level on my
    //     Windows [keyboard].
    //
    //     Need to lock level four in order to (ergonomically) access
    //     level four of this key.
    //
    //     üîó keyboard: https://www.amazon.com/Microsoft-Ergonomic-Wireless-Desktop-Keyboard/dp/B00CYX54C0/
    key <AD12> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };

    // 3rd keyboard row
    key <AC01> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, U2329
    ] };
    key <AC02> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, U232A
    ] };
    key <AC03> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AC04> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AC05> {
    symbols[Group1] = [
        // ‚òÖ Black Star
        NoSymbol, NoSymbol, NoSymbol, U2605
    ] };
    key <AC06> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, leftarrow
    ] };
    key <AC07> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, downarrow
    ] };
    key <AC08> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, uparrow
    ] };
    key <AC09> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, rightarrow
    ] };
    key <AC10> {
    symbols[Group1] = [
        // üè∑ Label
        NoSymbol, NoSymbol, NoSymbol, U1F3F7
    ] };
    key <AC11> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };

    // 4th keyboard row
    //
    // `‚Äπ`, Single Left-Pointing Angle Quotation Mark
    key <AB01> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, U2039
    ] };
    // `‚Ä∫`, Single Right-Pointing Angle Quotation Mark
    key <AB02> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, U203A
    ] };
    key <AB03> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AB04> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AB05> {
    symbols[Group1] = [
        // ‚ãà Bow Tie
        NoSymbol, NoSymbol, NoSymbol, U22C8
    ] };
    key <AB06> {
    symbols[Group1] = [
        // üìì Notebook
        // Mnemonic: ‚Äúnote‚Äù.
        // NOTE use to mean ‚Äúcomment‚Äù or ‚Äúnote‚Äù.  Use it as a prefix
        // like this:
        //
        //     üìì Oh btw, keep the following in mind ‚Ä¶
        NoSymbol, NoSymbol, NoSymbol, U1F4D3
    ] };
    key <AB07> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, U2032
    ] };
    key <AB08> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, abovedot
    ] };
    // `‚Ä¢`, Bullet
    key <AB09> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, enfilledcircbullet
    ] };
    key <AB10> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
};

// To be used for my current keyboard.
//
// This changes this layout:
//
//     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
//     ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ            ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ
//     ‚îÇCtrl  ‚îÇWin   ‚îÇAlt   ‚îÇ    Space   ‚îÇ AltGr‚îÇ  Menu‚îÇ  Ctrl‚îÇ
//     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
//
// To this:
//     ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
//     ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ            ‚îÇ      ‚îÇ      ‚îÇ      ‚îÇ
//     ‚îÇCtrl  ‚îÇAlt   ‚îÇWin   ‚îÇ    Space   ‚îÇ   Win‚îÇ   Alt‚îÇ  Ctrl‚îÇ
//     ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
xkb_symbols "set-up-alts-and-windows" {
    // Use right Alt as Alt key, instead of AltGr key.
    key <RALT> { [ Alt_R ] };
    include "twin-dexter(menu-to-ralt)"
    include "altwin(swap_alt_win)"
};

hidden partial modifier_keys
xkb_symbols "menu-to-ralt" {
    replace key <MENU> { [ Alt_R ] };
};

// Effectively ‚Äúextend‚Äù the left shift key by mapping the key to the
// right of it as another `Shift_L` key.  This makes it easier to
// use shift together with left Alt (on the Windows key in this
// mapping).
xkb_symbols "lsgt-as-shift" {
    key.type[Group1] = "ONE_LEVEL";
    key <LSGT> {
      [ Shift_L ]
    };
};

// Make a ‚Äúnumpad‚Äù.
// This numpad has zero on the lowest right corner.  Comma and
// period are on the second and third row from the top, respectively.
xkb_symbols "alphabet-section-numpad" {
    // Set `EIGHT_LEVEL` in case it is necessary.
    key.type[Group1] = "EIGHT_LEVEL";
    // First (topmost) numpad row.
    key <AD02> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        7, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AD03> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        8, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AD04> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        9, NoSymbol, NoSymbol, NoSymbol
    ] };
    // Second numpad row.
    key <AC01> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        comma, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AC02> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        4, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AC03> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        5, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AC04> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        6, NoSymbol, NoSymbol, NoSymbol
    ] };
    // Third numpad row.
    key <AB01> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        period, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AB02> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        1, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AB03> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        2, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AB04> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        3, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AB05> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        0, NoSymbol, NoSymbol, NoSymbol
    ] };
};

// Fifth level keymappings.
//
// Numpad on the left side, combining characters on the right side.
xkb_symbols "numpad-and-combining" {
    include "twin-dexter(alphabet-section-numpad)"
    // First row
    key <AD09> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        // caron
        U030C, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AD10> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        // breve
        U0306, NoSymbol, NoSymbol, NoSymbol
    ] };
    // Second row
    key <AC07> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        // acute accent
        U0301, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AC08> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        // grave accent
        U0300, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AC09> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        // diaresis
        U0308, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AC10> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        // circumflex
        U0302, NoSymbol, NoSymbol, NoSymbol
    ] };
    // Third (bottom) row
    key <AB07> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        // cedilLa
        U0327, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AB08> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        // dot below
        U0323, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AB09> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        // dot above
        U0307, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AB10> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        // macron
        U0304, NoSymbol, NoSymbol, NoSymbol
    ] };
};


xkb_symbols "all-f-keys-group-2" {
    include "twin-dexter(lhs-fk-group-2)"
    include "twin-dexter(rhs-fk-group-2)"
};

// Function keys on the ‚Äúnumpad‚Äù (‚Ä†1) (`F1`‚Äì`F9`) plus keys `B`, `G`,
// and `T` (`F10`‚Äì`F12`).
//
// ‚Ä† 1: The same layout as `alphabet-section-numpad`.
//
// Each key has one of the ‚Äúbasic‚Äù function keys, meaning one of the
// first 12, in addition to the key that is ‚Äú12 higher up‚Äù (Fy =
// Fx+12, where x is the lower function key).
//
// There are two levels each of these keys to allow for keybindings
// like `Shift+Fx`.  Notice how both level 2 and level 4 need (in
// part) the shift key to be accessed, so this should work.  Also
// keep in mind that accessing the fourth level *does not work*
// if you choose to do that by holding the latch keys on the numeric
// row (level 1, level 2, and group latch).  This is because holding
// these three keys at the same time leads to key jamming.  So if you
// need to type for example `Shift+F24` you need to use some other
// method, like for example using one of the keys as a latch, locking
// the group, or something like that.
xkb_symbols "lhs-fk-group-2" {
    // Keys `X`‚Äì`V`.
    key.type[Group2] = "EIGHT_LEVEL";
    key <AB02> {
      symbols[Group2] = [
          F1, F1, F13, F13, F25, F25
      ]
    };

    key <AB03> {
      symbols[Group2] = [
          F2, F2, F14, F14, F26, F26
      ]
    };

    key <AB04> {
      symbols[Group2] = [
          F3, F3, F15, F15, F27, F27
      ]
    };

    // Keys `S`‚Äì`F`.
    key <AC02> {
      symbols[Group2] = [
          F4, F4, F16, F16, F28, F28
      ]
    };

    key <AC03> {
      symbols[Group2] = [
          F5, F5, F17, F17, F29, F29
      ]
    };

    key <AC04> {
      symbols[Group2] = [
          F6, F6, F18, F18, F30, F30
      ]
    };

    // Keys `W`‚Äì`R`.
    key <AD02> {
      // NOTE keyboard jams on levels three and four due to the
      // combination of depressed keys needed to access these levels.
      // The `F19` is therefore moved to the `Z` (
      symbols[Group2] = [
          F7, F7, NoSymbol, NoSymbol, F31, F31
      ]
    };

    key <AD03> {
      symbols[Group2] = [
          F8, F8, F20, F20, F32, F32
      ]
    };

    key <AD04> {
      symbols[Group2] = [
          F9, F9, F21, F21, F33, F33
      ]
    };

    // Keys `B`, `G`, and `T`.
    key <AB05> {
      symbols[Group2] = [
          F10, F10, F22, F22, F34, F34
      ]
    };

    key <AC05> {
      symbols[Group2] = [
          F11, F11, F23, F23, F35, F35
      ]
    };

    key <AD05> {
      symbols[Group2] = [
          F12, F12, F24, F24
      ]
    };

    // `F19` on key `Z`.  Moved from `<AD02>` due to keyboard jamming.
    key <AB01> {
      symbols[Group2] = [
          NoSymbol, NoSymbol, F19, F19, NoSymbol, NoSymbol
      ]
    };
};

xkb_symbols "rhs-fk-group-2" {
    // F13‚ÄìF15
    key <AB07> {
    symbols[Group2] = [
        F13, F13
    ] };
    key <AB08> {
    symbols[Group2] = [
        F14, F14
    ] };
    key <AB09> {
    symbols[Group2] = [
        F15, F15
    ] };
    // F16‚ÄìF18
    key <AC07> {
    symbols[Group2] = [
        F16, F16
    ] };
    key <AC08> {
    symbols[Group2] = [
        F17, F17
    ] };
    key <AC09> {
    symbols[Group2] = [
        F18, F18
    ] };
    // F19‚ÄìF21
    key <AD07> {
    symbols[Group2] = [
        F19, F19
    ] };
    key <AD08> {
    symbols[Group2] = [
        F20, F20
    ] };
    key <AD09> {
    symbols[Group2] = [
        F21, F21
    ] };
    // F22‚ÄìF24
    key <AB10> {
    symbols[Group2] = [
        F22, F22
    ] };
    key <AC10> {
    symbols[Group2] = [
        F23, F23
    ] };
    key <AD10> {
    symbols[Group2] = [
        F24, F24
    ] };
};

xkb_compat {
    include "level5"
};

// Shift latches, group latches, menu key and compose key on the
// ‚Äúnumber row‚Äù.
xkb_symbols "latches-menu-and-compose" {
    // For latches
    // Levels
    replace key <AE02> {
        type[Group1]="ONE_LEVEL",
        [ ISO_Level5_Latch ]
    };
    replace key <AE03> {
        type[Group1]="ONE_LEVEL",
        [ ISO_Level3_Latch ]
    };
    replace key <AE04> {
        type[Group1]="ONE_LEVEL",
        [ ISO_Level2_Latch ]
    };
    replace key <AE08> {
        type[Group1]="ONE_LEVEL",
        [ ISO_Level2_Latch ]
    };
    replace key <AE09> {
        type[Group1]="ONE_LEVEL",
        [ ISO_Level3_Latch ]
    };
    replace key <AE10> {
        type[Group1]="ONE_LEVEL",
        [ ISO_Level5_Latch ]
    };
    // compose
    replace key <AE05> {
        type[Group1]="ONE_LEVEL",
        [ Multi_key ]
    };
    replace key <AE07> {
        type[Group1]="ONE_LEVEL",
        [ Multi_key ]
    };
    // Menu key (right mouse click).
    replace key <AE06> {
        type[Group1]="ONE_LEVEL",
        [ Menu ]
    };

    // Group latches.
    //
    // Latch next level or group.  Hold down to act as group switch,
    // analogous to how the other latch keys work.
    //
    // A difference from the latch keys seems to be that pressing it
    // twice does not lock the next group or layout.
    replace key <AE01> {
        type[Group1]="ONE_LEVEL",
        [ ISO_Group_Latch ]
    };
    replace key <AE11> {
        type[Group1]="ONE_LEVEL",
        [ ISO_Group_Latch ]
    };
};

// Lock levels by first pressing a latch key and then `<RTRN>`.
xkb_symbols "return-lock-shift-levels" {
    key.type[Group1] = "EIGHT_LEVEL";
    key <RTRN> {
    symbols[Group1] = [
        Return, Shift_Lock, ISO_Level3_Lock, ISO_Level3_Lock,
        ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock, ISO_Level5_Lock
    ],
    // NOTE Need to set the actions explicitly because:
    //     1. `Shift_Lock` won‚Äôt work otherwise (it won‚Äôt lock shift
    //        level 2).
    //     3. In order to lock multiple modifiers (e.g. level four:
    //        `modifiers=Shift+LevelThree`).
    actions[Group1] = [
        NoAction(), LockMods(modifiers=Shift),
        LockMods(modifiers=LevelThree),
        LockMods(modifiers=Shift+LevelThree),
        LockMods(modifiers=LevelFive),
        LockMods(modifiers=Shift+LevelFive),
        LockMods(modifiers=LevelThree+LevelFive),
        LockMods(modifiers=Shift+LevelThree+LevelFive)
    ]
    };
};

// A fifth- and sixth-level alternative to `my-extend`.  Uses only the
// the right side of the keyboard since `alphabet-section-numpad` uses
// the left side.
//
// The fifth level requires only one modifier to be pressed.  This in
// contrast to the seventh layer which requires two.
xkb_symbols "right-side-nav-and-misc" {
    // Row `Y`, `U`, `I`, etc.
    //
    // Vi-style navigation on keys `Y`‚Äì`O`.
    key <AD06> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        Left, Left, NoSymbol, NoSymbol
    ] };
    key <AD07> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        Down, Down, NoSymbol, NoSymbol
    ] };
    key <AD08> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        Up, Up, NoSymbol, NoSymbol
    ] };
    key <AD09> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        Right, Right, NoSymbol, NoSymbol
    ] };
    key <AD10> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        XF86Copy, XF86Paste, NoSymbol, NoSymbol
    ] };
    key <AD11> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        Undo, Redo, NoSymbol, NoSymbol
    ] };
    // TODO unmapped
    key <AD12> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    // Row `H`, `J`, `K`, etc.
    key <AC06> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        Page_Up, Page_Up, NoSymbol, NoSymbol
    ] };
    // TODO unmapped
    key <AC07> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    // `Escape` on the middle finger.
    key <AC08> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        Escape, Escape, NoSymbol, NoSymbol
    ] };
    key <AC09> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        BackSpace, BackSpace, NoSymbol, NoSymbol
    ] };
    key <AC10> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        Delete, Delete, NoSymbol, NoSymbol
    ] };
    // TODO unmapped
    key <AC11> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    // Row `N`, `M`, `,`, etc.
    key <AB06> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        Page_Down, Page_Down, NoSymbol, NoSymbol
    ] };
    key <AB07> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        Return, Return, NoSymbol, NoSymbol
    ] };
    key <AB08> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        Home, Home, NoSymbol, NoSymbol
    ] };
    key <AB09> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        End, End, NoSymbol, NoSymbol
    ] };
    // TODO unmapped
    key <AB10> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };

    // Delete key.
    key.type[Group1] = "EIGHT_LEVEL";
    key <DELE> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        StickyKeys_Enable, NoSymbol, NoSymbol, NoSymbol
    ] };
};

// My variation of extend layers, using levels seven and eight.
//
// See: https://forum.colemak.com/topic/2014-extend-extra-extreme/
xkb_symbols "my-extend" {

    key <AD01> {
    // Make an explicit group so that we can use an `actions` section
    // (see below).
    // NOTE: Pressing control and alt keys on the seventh and eight
    // level by using latch keys does not work that well.  See: issue in
    // the `issues.org` file dated 2017-09-01.
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, Control_L, Control_L
    ],
    actions[Group1] = [
        // Do not set any action for non-Extend layer keys.
        NoAction(), NoAction(), NoAction(), NoAction(),
        NoAction(), NoAction(),
        // We need to set appropriate actions for control keys.
        SetMods(mods=Control), SetMods(mods=Shift+Control)
    ]
    };
    key <AD02> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, ISO_First_Group, NoSymbol
    ] };
    // NOTE: on the next three keys (`ISO_Prev_Group` to
    // ISO_Last_Group) I use a hack where I redefine the actions so that
    // they work as locking keys for levels 2‚Äì4.  This makes it so that
    // these keys don‚Äôt do what they are named and originally intended
    // to do.  But it seems that I need to redefine the actions of some
    // original keys in order to get what I want, namely lock keys for
    // all the four groups.  I have tried to invent new keysyms in the
    // `compat` section of this file, but that didn‚Äôt work.
    //
    // NOTE: it seems that this hack makes it so that the keys are not
    // reported correctly in `xev`.  But that does not seem to have any
    // impact beyond the cosmetic
    key <AD03> {
    symbols[Group1] =[
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, ISO_Prev_Group, NoSymbol
    ],
    actions[Group1] = [
        // Do not set any action for non-Extend layer keys.
        NoAction(), NoAction(), NoAction(), NoAction(),
        NoAction(), NoAction(),
        // We need to set appropriate action for group locking.
        LockGroup(group=2),
        NoAction()
    ]
    };
    key <AD04> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, ISO_Next_Group, NoSymbol
    ],
    actions[Group1] = [
        // Do not set any action for non-Extend layer keys.
        NoAction(), NoAction(), NoAction(), NoAction(),
        NoAction(), NoAction(),
        // We need to set appropriate action for group locking.
        LockGroup(group=3),
        NoAction()
    ]
    };
    key <AD05> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, ISO_Last_Group, NoSymbol
    ],
    actions[Group1] = [
        // Do not set any action for non-Extend layer keys.
        NoAction(), NoAction(), NoAction(), NoAction(),
        NoAction(), NoAction(),
        // We need to set appropriate action for group locking.
        LockGroup(group=4),
        NoAction()
    ]
    };
    // HOT FIX: Commenting this out fixes the issue with the `y` key on
    // `no-p5`.
    // TODO: Fix this without having to remove this costumization.
    // key <AD06> {
    // // Make an explicit group so that we can use an `actions` section
    // // (see below).
    // // NOTE: Pressing control and alt keys on the seventh and eight
    // // level by using latch keys does not work that well.  See: issue in
    // // the `issues.org` file dated 2017-09-01.
    // symbols[Group1] = [
    //     NoSymbol, NoSymbol, NoSymbol, NoSymbol,
    //     NoSymbol, NoSymbol, Control_R, Control_R
    // ],
    // actions[Group1] = [
    //     // Do not set any action for non-Extend layer keys.
    //     NoAction(), NoAction(), NoAction(), NoAction(),
    //     NoAction(), NoAction(),
    //     // We need to set appropriate actions for control keys.
    //     SetMods(mods=Control), SetMods(mods=Shift+Control)
    // ]
    // };
    key <AD07> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, Home, Home
    ] };
    key <AD08> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, Up, Up
    ] };
    key <AD09> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, End, End
    ] };
    key <AD10> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, Delete, Delete
    ] };
    key <AD11> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, Insert, Insert
    ] };
    key <AC01> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, Escape, Escape
    ] };
    key <AC02> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, XF86Back, XF86Back
    ] };
    key <AC03> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, XF86Forward, XF86Forward
    ] };
    // NOTE: Pressing control and alt keys on the seventh and eight
    // level by using latch keys does not work that well.  See: issue in
    // the `issues.org` file dated 2017-09-01.
    key <AC04> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, Alt_L, Alt_L
    ],
    actions[Group1] = [
        // Do not set any action for non-Extend layer keys.
        NoAction(), NoAction(), NoAction(), NoAction(),
        NoAction(), NoAction(),
        // We need to set appropriate actions for alt keys.
        SetMods(mods=Alt), SetMods(mods=Shift+Alt)
    ]
    };
    key <AC05> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AC06> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, Page_Up, Page_Up
    ] };
    key <AC07> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, Left, Left
    ] };
    key <AC08> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, Down, Down
    ] };
    key <AC09> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, Right, Right
    ] };
    key <AC10>	{ [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, BackSpace, BackSpace
    ] };
    key <AC11>	{ [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AB01> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, Undo, Redo
    ] };
    key <AB02> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, XF86Cut, XF86Cut
    ] };
    key <AB03> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, XF86Copy, XF86Copy
    ] };
    key <AB04> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, XF86Paste, XF86Paste
    ] };
    // TODO: unmapped
    key <AB05> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    key <AB06> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, Page_Down, Page_Down
    ] };
    // `Return` on the `M` key, since `Control+M` in the terminal (`^M`)
    // acts as `Return` (technically carriage return, but that
    // translates into the `Return` behavior).
    key <AB07> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, Return, Return
    ] };
    // TODO: unmapped
    key <AB08> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    // TODO: unmapped
    key <AB09> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };
    // TODO: unmapped
    key <AB10> { [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        NoSymbol, NoSymbol, NoSymbol, NoSymbol
    ] };

};

// Template source: https://askubuntu.com/a/794087/136104
partial modifier_keys
xkb_symbols "hyper" {

    replace key <HYPR> {
      vmods = NumLock,
      symbols[Group1] = [ NoSymbol ],
      actions[Group1] = [ SetMods(modifiers=NumLock) ]
    };
    replace key <CAPS> {
      vmods = NumLock,
      symbols[Group1] = [ Hyper_L ],
      actions[Group1] = [ SetMods(modifiers=NumLock) ]
    };
    replace key <BKSL> {
      vmods = NumLock,
      // TODO When shift and shift level 3 are active, this key
      //     (`<BKSL>`) outputs `|`.
      symbols[Group1] = [ Hyper_R ],
      actions[Group1] = [ SetMods(modifiers=NumLock) ]
    };
    replace modifier_map Mod2 { <HYPR>, Hyper_L, Hyper_R };
};

// Media keys on level 5.
//
// These keys are implemented by using an Xchainkeys configuration file.
// Example (toggle play/pause Spotify):
//
//    XF86AudioPlay :exec playerctl play-pause spotify
//
// ¬ß Implementation
//
// Redirect keys to other keycodes and clear the modifier.  This makes
// it so that Xchainkeys recognizes these keys as `XF86AudioPlay` and so
// on.  Otherwise Xchainkeys just sees these keys as `Up`
// (`XF86AudioPlay`) and so on.
//
// Keycodes for what are intended to be media keys are found in
// `xkb/keycodes/evdev`.  For example, the followingline defines the
// keycode `<I172>` which I map the keysym `XF86AudioPlay` to:
//
//    <I172> = 172;   // #define KEY_PLAYPAUSE           164
xkb_symbols "lvl-5-media-keys" {
    key.type[Group1] = "EIGHT_LEVEL";
    // `XF86AudioPlay` will be used to _toggle_ play/pause.
    key <UP> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        XF86AudioPlay, NoSymbol, NoSymbol, NoSymbol
    ],
    actions[Group1] = [
        NoAction(), NoAction(), NoAction(), NoAction(),
        redirectkey(key=<I172>, clearMods=LevelFive), NoAction(),
        NoAction(), NoAction()
    ] };
    // Next song (Spotify).
    key <PGDN> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        XF86AudioNext, NoSymbol, NoSymbol, NoSymbol
    ],
    actions[Group1] = [
        NoAction(), NoAction(), NoAction(), NoAction(),
        redirectkey(key=<I171>, clearMods=LevelFive), NoAction(),
        NoAction(), NoAction()
    ] };
    // Previous song (Spotify).
    key <PGUP> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        XF86AudioPrev, NoSymbol, NoSymbol, NoSymbol
    ],
    actions[Group1] = [
        NoAction(), NoAction(), NoAction(), NoAction(),
        redirectkey(key=<I173>, clearMods=LevelFive), NoAction(),
        NoAction(), NoAction()
    ] };
    // Volume mute.
    key <DOWN> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        XF86AudioMute, NoSymbol, NoSymbol, NoSymbol
    ],
    actions[Group1] = [
        NoAction(), NoAction(), NoAction(), NoAction(),
        redirectkey(key=<MUTE>, clearMods=LevelFive), NoAction(),
        NoAction(), NoAction()
    ] };
    // Volume decrease.
    key <LEFT> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        XF86AudioPrev, NoSymbol, NoSymbol, NoSymbol
    ],
    actions[Group1] = [
        NoAction(), NoAction(), NoAction(), NoAction(),
        redirectkey(key=<VOL->, clearMods=LevelFive), NoAction(),
        NoAction(), NoAction()
    ] };
    // Volume increase.
    key <RGHT> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, NoSymbol,
        XF86AudioPrev, NoSymbol, NoSymbol, NoSymbol
    ],
    actions[Group1] = [
        NoAction(), NoAction(), NoAction(), NoAction(),
        redirectkey(key=<VOL+>, clearMods=LevelFive), NoAction(),
        NoAction(), NoAction()
    ] };
};

// Use left shift as `ISO_Lock`.
xkb_symbols "iso-lock" {
    replace key <LFSH> {
    symbols[Group1] = [
        ISO_Lock
    ],
    actions[Group1] = [
        ISOLock(modifiers=Lock, affect=all)
    ]
    };
};

// Complement `ISO_Lock`.
xkb_symbols "lock-unlocker" {
    // Print key
    replace key <PRSC> {
    type[Group1] = "CTRL_ALT_SUPER",
    symbols[Group1] = [
        VoidSymbol, VoidSymbol, VoidSymbol, VoidSymbol,
        VoidSymbol, VoidSymbol, VoidSymbol, VoidSymbol
    ],
    actions[Group1] = [
        NoAction(),
	LockMods(modifiers=Control),
	LockMods(modifiers=Alt),
	LockMods(modifiers=Control+Alt),
	LockMods(modifiers=Super),
	LockMods(modifiers=Control+Super),
	LockMods(modifiers=Alt+Super),
	LockMods(modifiers=Control+Alt+Super)
    ]
    };
};

// Group escape.
//
// Use `<RTRN>` to escape back to Group 1.
xkb_symbols "return-group-escape" {
    key <RTRN> {
    symbols[Group2] = [
        ISO_First_Group
    ],
    // NOTE Apparently I need to declare this action explicitly.  If I
    //     don‚Äôt the key seems to lock to Group 2 instead of Group 1.  I
    //     have no idea why.
    actions[Group2] = [
        LockGroup(group=1)
    ],
    symbols[Group3] = [
        ISO_First_Group
    ],
    // NOTE Ditto the note above.
    actions[Group3] = [
        LockGroup(group=1)
    ],
    symbols[Group4] = [
        ISO_First_Group
    ],
    // NOTE Ditto the note above.
    actions[Group4] = [
        LockGroup(group=1)
    ]
    };
};

// ¬ß Group locks
xkb_symbols "group-locks" {
    key <HOME> {
        symbols[Group2] = [
            ISO_First_Group_Lock
        ],
        symbols[Group3] = [
            ISO_First_Group_Lock
        ],
        symbols[Group4] = [
            ISO_First_Group_Lock
        ],
        actions[Group2] = [
            LockGroup(group=1)
        ],
        actions[Group3] = [
            LockGroup(group=1)
        ],
        actions[Group4] = [
            LockGroup(group=1)
        ]
    };
    key <END> {
       symbols[Group2] = [
           ISO_Prev_Group_Lock
       ],
       symbols[Group3] = [
           ISO_Prev_Group_Lock
       ],
       symbols[Group4] = [
           ISO_Prev_Group_Lock
       ],
       actions[Group2] = [
           LockGroup(group=2)
       ],
       actions[Group3] = [
           LockGroup(group=2)
       ],
       actions[Group4] = [
           LockGroup(group=2)
       ]
    };
    key <PGUP> {
       symbols[Group2] = [
           ISO_Next_Group_Lock
       ],
       symbols[Group3] = [
           ISO_Next_Group_Lock
       ],
       symbols[Group4] = [
           ISO_Next_Group_Lock
       ],
       actions[Group2] = [
           LockGroup(group=3)
       ],
       actions[Group3] = [
           LockGroup(group=3)
       ],
       actions[Group4] = [
           LockGroup(group=3)
       ]
    };
    key <PGDN> {
       symbols[Group2] = [
           ISO_Last_Group_Lock
       ],
       symbols[Group3] = [
           ISO_Last_Group_Lock
       ],
       symbols[Group4] = [
           ISO_Last_Group_Lock
       ],
       actions[Group2] = [
           LockGroup(group=4)
       ],
       actions[Group3] = [
           LockGroup(group=4)
       ],
       actions[Group4] = [
           LockGroup(group=4)
       ]
    };
};

// Regular symbols on Group 3.  For testing the group.
xkb_symbols "group-3-test-symbols" {

    // keys `D`, `F`, and `G`.  Just for testing
    key <AC03> {
        [],
        [],
        [ equal, NoSymbol ]
    };
    key <AC04> {
        [],
        [],
        [ grave, NoSymbol ]
    };
    key <AC05> {
        [],
        [],
        [ at, NoSymbol ]
    };

};

// Regular symbols on Group 4.  For testing the group.
xkb_symbols "group-4-test-symbols" {

    // keys `D`, `F`, and `G`.  Just for testing
    key <AC03> {
        [],
        [],
        [],
        [ plus, NoSymbol ]
    };
    key <AC04> {
        [],
        [],
        [],
        [ dollar, NoSymbol ]
    };
    key <AC05> {
        [],
        [],
        [],
        [ colon, NoSymbol ]
    };

};

// Latch group 4.
xkb_symbols "fake-latch-escape-level-four" {
    key.type[Group1] = "EIGHT_LEVEL";
    key <TAB> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, ISO_Last_Group
    ],
    actions[Group1] = [
        NoAction(), NoAction(), NoAction(), LatchGroup(group=4)
    ]
    };
    key <AD12> {
    symbols[Group1] = [
        NoSymbol, NoSymbol, NoSymbol, ISO_Last_Group
    ],
    actions[Group1] = [
        NoAction(), NoAction(), NoAction(), LatchGroup(group=4)
    ]
    };
};

// Fake group 1, level 1 on group 4, level 4.
xkb_symbols "fake-g1l1-on-g4l4" {
    // 2nd keyboard row
    key <AD01> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, q
    ] };
    key <AD02> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, w
    ] };
    key <AD03> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, e
    ] };
    key <AD04> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, r
    ] };
    key <AD05> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, t
    ] };
    key <AD06> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, y
    ] };
    key <AD07> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, u
    ] };
    key <AD08> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, i
    ] };
    key <AD09> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, o
    ] };
    key <AD10> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, p
    ] };

    // 3rd keyboard row
    key <AC01> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, a
    ] };
    key <AC02> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, s
    ] };
    key <AC03> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, d
    ] };
    key <AC04> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, f
    ] };
    key <AC05> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, g
    ] };
    key <AC06> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, h
    ] };
    key <AC07> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, j
    ] };
    key <AC08> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, k
    ] };
    key <AC09> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, l
    ] };
    key <AC10> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, rightsinglequotemark
    ] };

    // 4th keyboard row
    key <AB01> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, z
    ] };
    key <AB02> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, x
    ] };
    key <AB03> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, c
    ] };
    key <AB04> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, v
    ] };
    key <AB05> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, b
    ] };
    key <AB06> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, n
    ] };
    key <AB07> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, m
    ] };
    key <AB08> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, comma
    ] };
    key <AB09> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, period
    ] };
    key <AB10> {
    symbols[Group4] = [
        NoSymbol, NoSymbol, NoSymbol, minus
    ] };
};

// ¬ß Backspace Word
//
// `Ctrl+BackSpace` on level 1, `BackSpace` on level 2.  Most
// applications map `Ctrl+BackSpace` to something like ‚Äúerase word
// backwards‚Äù.
//
// See `compat/mycompat`, section ‚ÄúBackSpace Word‚Äù, for the rest of the
// implementation.
xkb_symbols "backspace-word" {

    // `Farsi_0` is an arbitrary keysym that I have no other need for.
    // The actual keysym doesn‚Äôt matter since it is only used for
    // redirection.
    key <BKSP> { [
	Farsi_0, BackSpace
    ] };

    // `<I120>` is `#define KEY_MACRO` according to
    // `xkb/keycodes/evdev`.  Just a keycode that I have no other use
    // for.
    key <I120> { [
	BackSpace
    ] };

};
